{-# LANGUAGE CPP #-}
{-# LANGUAGE FlexibleInstances #-}
{-# LANGUAGE LambdaCase #-}
{-# LANGUAGE OverloadedRecordDot #-}

module Lam4.Expr.Printer (printTree)
  where
import           Base.NonEmpty            (NonEmpty(..))
import qualified Base.Text                as T
import           Lam4.Expr.CommonSyntax
import           Lam4.Expr.ConcreteSyntax
import           Lam4.Expr.Name           (Name (..))
import Data.Char ( Char, isSpace )

-- NB. Most of this file is generated by BNFC from a very ugly grammar that Inari hacked together.
-- This printer (I dare not call it pretty) is a first proof-of-concept, which I intend to throw away and make a better one. Better in the sense of more readable and maintainable.

-- | The top-level printing method.
printTree :: Print a => a -> String
printTree = render . prt 0

type Doc = [ShowS] -> [ShowS]

doc :: ShowS -> Doc
doc = (:)

render :: Doc -> String
render d = rend 0 False (map ($ "") $ d []) ""
  where
  rend
    :: Int        -- ^ Indentation level.
    -> Bool       -- ^ Pending indentation to be output before next character?
    -> [String]
    -> ShowS
  rend i p = \case
      "["      :ts -> char '[' . rend i False ts
      "("      :ts -> char '(' . rend i False ts
      "{"      :ts -> onNewLine i     p . showChar   '{'  . new (i+1) ts
      "}" : ";":ts -> onNewLine (i-1) p . showString "};" . new (i-1) ts
      "}"      :ts -> onNewLine (i-1) p . showChar   '}'  . new (i-1) ts
      [";"]        -> char ';'
      ";"      :ts -> char ';' . new i ts
      t  : ts@(s:_) | closingOrPunctuation s
                   -> pending . showString t . rend i False ts
      t        :ts -> pending . space t      . rend i False ts
      []           -> id
    where
    -- Output character after pending indentation.
    char :: Char -> ShowS
    char c = pending . showChar c

    -- Output pending indentation.
    pending :: ShowS
    pending = if p then indent i else id

  -- Indentation (spaces) for given indentation level.
  indent :: Int -> ShowS
  indent i = replicateS (2*i) (showChar ' ')

  -- Continue rendering in new line with new indentation.
  new :: Int -> [String] -> ShowS
  new j ts = showChar '\n' . rend j True ts

  -- Make sure we are on a fresh line.
  onNewLine :: Int -> Bool -> ShowS
  onNewLine i p = (if p then id else showChar '\n') . indent i

  -- Separate given string from following text by a space (if needed).
  space :: String -> ShowS
  space t s =
    case (all isSpace t, null spc, null rest) of
      (True , _   , True ) -> []             -- remove trailing space
      (False, _   , True ) -> t              -- remove trailing space
      (False, True, False) -> t ++ ' ' : s   -- add space if none
      _                    -> t ++ s
    where
      (spc, rest) = span isSpace s

  closingOrPunctuation :: String -> Bool
  closingOrPunctuation [c] = c `elem` closerOrPunct
  closingOrPunctuation _   = False

  closerOrPunct :: String
  closerOrPunct = ")],;"

parenth :: Doc -> Doc
parenth ss = doc (showChar '(') . ss . doc (showChar ')')

concatS :: [ShowS] -> ShowS
concatS = foldr (.) id

concatD :: [Doc] -> Doc
concatD = foldr (.) id

replicateS :: Int -> ShowS -> ShowS
replicateS n f = concatS (replicate n f)

-- | The printer class does the job.

class Print a where
  prt :: Int -> a -> Doc

instance {-# OVERLAPPABLE #-} Print a => Print [a] where
  prt i = concatD . map (prt i)

instance Print Char where
  prt _ c = doc (showChar '\'' . mkEsc '\'' c . showChar '\'')

instance Print String where
  prt _ = printString

instance Print T.Text where
  prt i x = prPrec i 0 (concatD [doc (showString (T.unpack x))])

printString :: String -> Doc
printString s = doc (showChar '"' . concatS (map (mkEsc '"') s) . showChar '"')

mkEsc :: Char -> Char -> ShowS
mkEsc q = \case
  s | s == q -> showChar '\\' . showChar s
  '\\' -> showString "\\\\"
  '\n' -> showString "\\n"
  '\t' -> showString "\\t"
  s -> showChar s

prPrec :: Int -> Int -> Doc -> Doc
prPrec i j = if j < i then parenth else id

instance Print Int where
  prt _ x = doc (shows x)

instance Print Double where
  prt _ x = doc (shows x)

instance Print [Expr] where
  prt _ [] = concatD []
  prt _ [x] = concatD [prt 0 x]
  prt _ (x:xs) = concatD [prt 0 x, doc (showString ","), prt 0 xs]

instance Print [Name] where
  prt _ [] = concatD []
  prt _ [x] = concatD [prt 0 x]
  prt _ (x:xs) = concatD [prt 0 x, doc (showString ","), prt 0 xs]

instance Print [Statement] where
  prt _ [] = concatD []
  prt _ [x] = concatD [prt 0 x]
  prt _ (x:xs) = concatD [prt 0 x, doc (showString "\n\n"), prt 0 xs]

instance Print [Decl] where
  prt _ [] = concatD []
  prt _ [x] = concatD [prt 0 x]
  prt _ (x:xs) = concatD [prt 0 x, doc (showString "\n\n"), prt 0 xs]

instance Print [RowTypeDecl] where
  prt _ [] = concatD []
  prt _ [x] = concatD [prt 0 x]
  prt _ (x:xs) = concatD [prt 0 x, doc (showString "\n"), prt 0 xs]

-- type Row a = [(Name, a)] where
instance Print (Row Expr) where
  prt _ [] = concatD []
  prt _ [x] = concatD [prt 0 x]
  prt _ (x:xs) = concatD [prt 0 x, doc (showString ","), prt 0 xs]

-- Building block for Row
instance Print (Name, Expr) where
  prt i (name, expr) = prPrec i 0 (concatD [prt 0 name, doc (showString "="), prt 0 expr])

instance Print Decl where
  prt i = \case
    NonRec name expr -> prPrec i 0 (concatD [prt 0 name, prt 0 expr])

    -- Name is actually part of the Predicate.
    -- doing this quick hack to move it to where it belongs.
    Rec name (Predicate md vars expr) -> prPrec i 0 (concatD [prt 0 (Predicate md (name:vars) expr)])

    -- if Expr is not Predicate, render Name here
    Rec name expr -> prPrec i 0 (concatD [prt 0 name, prt 0 expr])

    -- Name is actually part of the RecordDecl.
    -- doing this quick hack to move it to where it belongs.
    DataDecl name (RecordDecl rowtypedecls parents descr) ->
      let newDecl = RecordDecl (dummyRowTypeDecl name:rowtypedecls) parents descr
      in prPrec i 0 (concatD [prt 0 newDecl])

    Eval expr -> prPrec i 0 (concatD [doc (showString "@REPORT"), prt 0 expr])

dummyRowTypeDecl :: Name -> RowTypeDecl
dummyRowTypeDecl name = MkRowTypeDecl name (TyBuiltin BuiltinTypeBoolean) (MkRowMetadata Nothing)

instance Print RuleMetadata where
  prt i md = case md.description of
    Just text -> prt i text
    Nothing -> mempty

instance Print RecordDeclMetadata where
  prt i md = case md.description of
    Just text -> prt i text
    Nothing -> mempty

instance Print DataDecl where
  {- TODO: description is something like
    /-
     description: "how much can be won from the jackpot."
     -/
  -}
  prt i = \case
    RecordDecl (recname:rowtypedecls) []      metadata ->
      prPrec i 0 (concatD [
        doc (showString "STRUCTURE")
      , prt 0 recname
      , doc (showString "{")
      , prt 0 rowtypedecls
      , doc (showString "}")
      , prt 0 metadata])
    RecordDecl (recname:rowtypedecls) parents metadata ->
      prPrec i 0 (concatD [
        doc (showString "STRUCTURE")
      , prt 0 recname
      , doc (showString "SPECIALIZES")
      , prt 0 parents
      , doc (showString "{")
      , prt 0 rowtypedecls
      , doc (showString "}")
      , prt 0 metadata])

instance Print Expr where
  prt i = \case
    Var name -> prPrec i 0 (concatD [prt 0 name])
    Lit lit -> prPrec i 0 (concatD [prt 0 lit])
    Cons expr1 expr2 -> prPrec i 0 (concatD [prt 0 expr1, doc (showString "followed_by_items_in"), prt 0 expr2])
    List exprs -> prPrec i 0 (concatD [doc (showString "LIST_OF"), prt 0 exprs])
    Unary unaryop expr -> prPrec i 0 (concatD [prt 0 unaryop, prt 0 expr])
    BinExpr binop expr1 expr2 -> prPrec i 0 (concatD [prt 0 expr1, prt 0 binop, prt 0 expr2])
    IfThenElse expr1 expr2 expr3 -> prPrec i 0 (concatD [doc (showString "IF"), prt 0 expr1, doc (showString "THEN"), prt 0 expr2, doc (showString "ELSE"), prt 0 expr3])
    FunApp expr exprs -> prPrec i 0 (concatD [prt 0 expr, doc (showString "("), prt 0 exprs, doc (showString ")")])
    Record rows -> prPrec i 0 (concatD [doc (showString "{|"), prt 0 rows, doc (showString "|}")])
    Project expr name -> prPrec i 0 (concatD [prt 0 expr, prt 0 name])
    Fun metadata names expr ->
      prPrec i 0 (concatD [
          prt 0 metadata
        , doc (showString "(")
        , prt 0 names
        , doc (showString ")")
        , doc (showString "=")
        , prt 0 expr])
    Let decl expr -> prPrec i 0 (concatD [doc (showString "LET"), doc (showString "{"), prt 0 decl, doc (showString "}"), doc (showString "IN"), doc (showString "{"), prt 0 expr, doc (showString "}")])
    StatementBlock (st :| sts) -> prPrec i 0 (concatD [prt 0 (st:sts)])
    NormIsInfringed name -> prPrec i 0 (concatD [prt 0 name, doc (showString "IS_INFRINGED")])
    Predicate metadata names expr ->
      prPrec i 0 (concatD [
          prt 0 metadata
        , doc (showString "GIVEN ()")
        , doc (showString "\nDECIDE")
        , prt 0 names
        , doc (showString "\nIF")
        , prt 0 expr])
    PredApp expr exprs -> prPrec i 0 (concatD [prt 0 expr, doc (showString "("), prt 0 exprs, doc (showString ")")])
    List exprs -> prt i exprs
    Sig{} -> error "not yet implemented: Sig"
    Relation{} -> error "not yet implemented: Relation"

instance Print OriginalRuleRef where
  prt i = \case
    MkOriginalRuleRef n -> prPrec i 0 (concatD [doc (showString "\167"), prt 0 n])

instance Print Lit where
  prt i = \case
    IntLit n -> prPrec i 0 (concatD [prt 0 n])
    BoolLit bool -> prPrec i 0 (concatD [prt 0 bool])

instance Print Statement where
  prt i = \case
    IfStatement expr statement statements -> prPrec i 0 (concatD [doc (showString "IF"), prt 0 expr, doc (showString "THEN"), prt 0 statement, doc (showString "ELSE"), prt 0 statements])
    Norm name deonticmodal action -> prPrec i 0 (concatD [prt 0 name, prt 0 deonticmodal, prt 0 action])

instance Print Action where
  prt i = \case
    ActionBlock (Just name) params primactions -> prPrec i 0 (concatD [doc (showString "ACTION"), prt 0 name, doc (showString "="), doc (showString "DO"), doc (showString "{"), prt 0 params, prt 0 primactions, doc (showString "}")])
    ActionBlock Nothing params primactions -> prPrec i 0 (concatD [doc (showString "DO"), doc (showString "{"), prt 0 params, prt 0 primactions, doc (showString "}")])
    PrimitiveAction primaction -> prPrec i 0 (concatD [prt 0 primaction])

instance Print [PrimAction] where
  prt _ [] = concatD []
  prt _ [x] = concatD [prt 0 x]
  prt _ (x:xs) = concatD [prt 0 x, doc (showString "then"), prt 0 xs]

instance Print PrimAction where
  prt i = \case
    Assign name expr -> prPrec i 0 (concatD [prt 0 name, doc (showString "="), prt 0 expr])
    ActionRef name -> prPrec i 0 (concatD [prt 0 name])

instance Print DeonticModal where
  prt i = \case
    Obligation -> prPrec i 0 (concatD [doc (showString "MUST")])
    Permission -> prPrec i 0 (concatD [doc (showString "MAY")])

instance Print UnaryOp where
  prt i = \case
    Not -> prPrec i 0 (concatD [doc (showString "NOT")])
    UnaryMinus -> prPrec i 0 (concatD [doc (showString "-")])

instance Print BinOp where
  prt i = \case
    Or -> prPrec i 0 (concatD [doc (showString "OR")])
    And -> prPrec i 0 (concatD [doc (showString "AND")])
    Plus -> prPrec i 0 (concatD [doc (showString "+")])
    Minus -> prPrec i 0 (concatD [doc (showString "-")])
    Modulo -> prPrec i 0 (concatD [doc (showString "%")])
    Mult -> prPrec i 0 (concatD [doc (showString "*")])
    Divide -> prPrec i 0 (concatD [doc (showString "/")])
    Lt -> prPrec i 0 (concatD [doc (showString "<")])
    Le -> prPrec i 0 (concatD [doc (showString "<=")])
    Gt -> prPrec i 0 (concatD [doc (showString ">")])
    Ge -> prPrec i 0 (concatD [doc (showString ">=")])
    Eq -> prPrec i 0 (concatD [doc (showString "==")])
    Ne -> prPrec i 0 (concatD [doc (showString "!=")])

instance Print Bool where
  prt i = \case
    True -> prPrec i 0 (concatD [doc (showString "True")])
    False -> prPrec i 0 (concatD [doc (showString "False")])

instance Print Name where
  prt i n = prPrec i 0 (concatD [prt 0 n.name])

instance Print TypeExpr where
  prt i = \case
    TyCustom name -> prPrec i 0 (concatD [prt 0 name])
    TyBuiltin builtintype -> prPrec i 0 (concatD [prt 0 builtintype])

instance Print TyBuiltin where
  prt i = \case
    BuiltinTypeString -> prPrec i 0 (concatD [doc (showString "String")])
    BuiltinTypeInteger -> prPrec i 0 (concatD [doc (showString "Integer")])
    BuiltinTypeBoolean -> prPrec i 0 (concatD [doc (showString "Boolean")])

instance Print RowTypeDecl where
  prt i rtd = prPrec i 0 (concatD [prt 0 rtd.name, doc (showString ":"), prt 0 rtd.typeAnnot])
