import { type Module, inject } from 'langium';
import { createDefaultModule, createDefaultSharedModule, type DefaultSharedModuleContext, type LangiumServices, type LangiumSharedServices, type PartialLangiumServices } from 'langium/lsp';
import { MiniL4TypesGeneratedModule, MiniL4TypesGeneratedSharedModule } from './generated/module.js';
import { MiniL4TypesValidator, registerValidationChecks } from './mini-l4-types-validator.js';

/**
 * Declaration of custom services - add your own service classes here.
 */
export type MiniL4TypesAddedServices = {
    validation: {
        MiniL4TypesValidator: MiniL4TypesValidator
    }
}

/**
 * Union of Langium default services and your custom services - use this as constructor parameter
 * of custom service classes.
 */
export type MiniL4TypesServices = LangiumServices & MiniL4TypesAddedServices

/**
 * Dependency injection module that overrides Langium default services and contributes the
 * declared custom services. The Langium defaults can be partially specified to override only
 * selected services, while the custom services must be fully specified.
 */
export const MiniL4TypesModule: Module<MiniL4TypesServices, PartialLangiumServices & MiniL4TypesAddedServices> = {
    validation: {
        MiniL4TypesValidator: () => new MiniL4TypesValidator()
    }
};

/**
 * Create the full set of services required by Langium.
 *
 * First inject the shared services by merging two modules:
 *  - Langium default shared services
 *  - Services generated by langium-cli
 *
 * Then inject the language-specific services by merging three modules:
 *  - Langium default language-specific services
 *  - Services generated by langium-cli
 *  - Services specified in this file
 *
 * @param context Optional module context with the LSP connection
 * @returns An object wrapping the shared services and the language-specific services
 */
export function createMiniL4TypesServices(context: DefaultSharedModuleContext): {
    shared: LangiumSharedServices,
    MiniL4Types: MiniL4TypesServices
} {
    const shared = inject(
        createDefaultSharedModule(context),
        MiniL4TypesGeneratedSharedModule
    );
    const MiniL4Types = inject(
        createDefaultModule({ shared }),
        MiniL4TypesGeneratedModule,
        MiniL4TypesModule
    );
    shared.ServiceRegistry.register(MiniL4Types);
    registerValidationChecks(MiniL4Types);
    return { shared, MiniL4Types };
}
